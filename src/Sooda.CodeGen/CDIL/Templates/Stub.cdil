class ${ClassName}_Stub
    attributes Public,Abstract
    extends ${BaseClassName}

constructor(SoodaTransaction tran)
    attributes Public
    baseArg(arg(tran))
begin
#ifnot HasBaseClass
    call this.InitNewObject()
#endif
end

#ifnot HasBaseClass
constructor(SoodaTransaction tran, Object key)
    attributes Public
    baseArg(arg(tran))
begin

    call this.SetPrimaryKeyValue(arg(key))
end
#endif

#if HasBaseClass
constructor(SoodaTransaction tran, Object key)
    attributes Public
    baseArg(arg(tran))
    baseArg(arg(key))
begin   
end
#endif


constructor(SoodaConstructor c)
    attributes Public
    baseArg(arg(c))
begin
end

#ifnot MiniStub

method Get${ClassName}FieldValuesForRead(System.Int32 requiredTable)
    attributes Private
#if ArrayFieldValues
    returns SoodaObjectFieldValues
#else
	returns ${ClassName}_Values
#endif
begin
#if ArrayFieldValues
    return typeref(Sooda.ObjectMapper.SoodaObjectImpl).GetFieldValuesForRead(this, arg(requiredTable))
#else
    return cast(${ClassName}_Values, typeref(Sooda.ObjectMapper.SoodaObjectImpl).GetFieldValuesForRead(this, arg(requiredTable)))
#endif
end

method InitFieldValues(System.Int32 fieldCount, arrayof(System.String) fieldNames)
    attributes Family,Override
    returns SoodaObjectFieldValues
begin
#if ArrayFieldValues
    return new SoodaObjectArrayFieldValues(arg(fieldCount))
#else
    return new ${ClassName}_Values(arg(fieldNames))
#endif
end

method GetClassInfo()
    customattribute System.Diagnostics.DebuggerStepThroughAttribute
    attributes Public,Override
    returns Sooda.Schema.ClassInfo
begin
    return typeref(${ClassName}_Factory).TheClassInfo
end

method GetFieldHandler(System.Int32 ordinal)
    attributes Assembly,Family,Override
    returns Sooda.ObjectMapper.SoodaFieldHandler
begin
    return typeref(${ClassName}_Factory).InternalGetFieldHandler(arg(ordinal))
end

#ifnot HasBaseClass
#if HasKeyGen

method GetKeyGenerator()
    attributes Public,Static,Final
    returns IPrimaryKeyGenerator
begin
    return defaultscope.keyGenerator$
end

#endif
#endif

#if HasKeyGen

method InitNewObject()
    attributes Assembly,Family,Override
begin
	if defaultscope.GetTransaction().IsKeyGeneratorDisabled('${ClassName}')
		then
 	  		return;
		endif;
	call this.SetPrimaryKeyValue(defaultscope.GetKeyGenerator().GetNextKeyValue())
end

#endif

#ifnot HasKeyGen

method InitNewObject()
     attributes Assembly,Family,Override
begin
    call this.RegisterObjectInTransaction()
end

#endif

#endif  // MiniStub
